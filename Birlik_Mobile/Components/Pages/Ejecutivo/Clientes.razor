@page "/operativo/clientes"
@inject NavigationManager Nav

<div class="clientes-container">
    <!-- Header de la página -->
    <div class="page-header">
        <button class="back-btn" @onclick="@(() => Nav.NavigateTo("/operativo/dashboard"))">
            <i class="bi bi-arrow-left"></i>
        </button>
        <h1 class="page-title">Mis Clientes</h1>
        <button class="add-btn" @onclick="AgregarCliente">
            <i class="bi bi-person-plus"></i>
        </button>
    </div>

    <!-- Estadísticas rápidas -->
    <div class="stats-section">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="bi bi-people"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">@GetTotalClientes()</span>
                <span class="stat-label">Total Clientes</span>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="bi bi-shield-check"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">@GetClientesActivos()</span>
                <span class="stat-label">Activos</span>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="bi bi-calendar-check"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">@GetClientesNuevos()</span>
                <span class="stat-label">Este Mes</span>
            </div>
        </div>
    </div>

    <!-- Filtros y búsqueda -->
    <div class="filters-section">
        <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" placeholder="Buscar cliente..." @bind="searchTerm" @bind:event="oninput">
        </div>
        
        <div class="filter-buttons">
            <button class="filter-btn @(selectedFilter == "todos" ? "active" : "")" @onclick="@(() => selectedFilter = "todos")">
                Todos
            </button>
            <button class="filter-btn @(selectedFilter == "activos" ? "active" : "")" @onclick="@(() => selectedFilter = "activos")">
                Activos
            </button>
            <button class="filter-btn @(selectedFilter == "inactivos" ? "active" : "")" @onclick="@(() => selectedFilter = "inactivos")">
                Inactivos
            </button>
        </div>
    </div>

    <!-- Lista de clientes -->
    <div class="clientes-list">
        @foreach (var cliente in GetFilteredClientes())
        {
            <div class="cliente-card @GetClienteStatusClass(cliente.Estado)" @onclick="@(() => VerDetalleCliente(cliente.Id))">
                <div class="cliente-header">
                    <div class="cliente-avatar">
                        <i class="bi bi-person-circle"></i>
                    </div>
                    <div class="cliente-info">
                        <h3 class="cliente-nombre">@cliente.Nombres @cliente.Apellidos</h3>
                        <p class="cliente-cedula">Cédula: @cliente.Cedula</p>
                        <p class="cliente-email">@cliente.Email</p>
                    </div>
                    <div class="cliente-status">
                        <span class="status-badge @GetClienteStatusClass(cliente.Estado)">@cliente.Estado</span>
                    </div>
                </div>

                <div class="cliente-details">
                    <div class="detail-row">
                        <span class="detail-label">Teléfono:</span>
                        <span class="detail-value">@cliente.Telefono</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Pólizas:</span>
                        <span class="detail-value">@cliente.CantidadPolizas</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Último contacto:</span>
                        <span class="detail-value">@cliente.UltimoContacto.ToString("dd/MM/yyyy")</span>
                    </div>
                </div>

                <div class="cliente-actions">
                    <button class="action-btn primary" @onclick="@(() => VerDetalleCliente(cliente.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-eye"></i>
                        Ver
                    </button>
                    <button class="action-btn secondary" @onclick="@(() => EditarCliente(cliente.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-pencil"></i>
                        Editar
                    </button>
                    <button class="action-btn call" @onclick="@(() => LlamarCliente(cliente.Telefono))" @onclick:stopPropagation="true">
                        <i class="bi bi-telephone"></i>
                        Llamar
                    </button>
                </div>

                @if (cliente.TieneVencimientos)
                {
                    <div class="warning-banner">
                        <i class="bi bi-exclamation-triangle"></i>
                        <span>Tiene pólizas próximas a vencer</span>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Botón flotante para nuevo cliente -->
    <button class="fab-btn" @onclick="AgregarCliente">
        <i class="bi bi-plus-lg"></i>
    </button>

    <!-- Estado vacío -->
    @if (!GetFilteredClientes().Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-people"></i>
            </div>
            <h3>No hay clientes</h3>
            <p>No se encontraron clientes con los filtros seleccionados</p>
            <button class="btn-primary" @onclick="@(() => selectedFilter = "todos")">
                Ver Todos
            </button>
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedFilter = "todos";

    private List<ClienteInfo> clientes = new()
    {
        new ClienteInfo
        {
            Id = 1,
            Nombres = "María Elena",
            Apellidos = "Rodríguez González",
            Cedula = "123456789",
            Email = "maria.rodriguez@email.com",
            Telefono = "8888-1111",
            Estado = "Activo",
            CantidadPolizas = 3,
            UltimoContacto = DateTime.Now.AddDays(-5),
            TieneVencimientos = true
        },
        new ClienteInfo
        {
            Id = 2,
            Nombres = "Carlos Alberto",
            Apellidos = "Méndez López",
            Cedula = "987654321",
            Email = "carlos.mendez@email.com",
            Telefono = "8888-2222",
            Estado = "Activo",
            CantidadPolizas = 1,
            UltimoContacto = DateTime.Now.AddDays(-10),
            TieneVencimientos = false
        },
        new ClienteInfo
        {
            Id = 3,
            Nombres = "Ana Lucía",
            Apellidos = "Vargas Solís",
            Cedula = "456789123",
            Email = "ana.vargas@email.com",
            Telefono = "8888-3333",
            Estado = "Inactivo",
            CantidadPolizas = 0,
            UltimoContacto = DateTime.Now.AddMonths(-2),
            TieneVencimientos = false
        },
        new ClienteInfo
        {
            Id = 4,
            Nombres = "Roberto",
            Apellidos = "Jiménez Herrera",
            Cedula = "789123456",
            Email = "roberto.jimenez@email.com",
            Telefono = "8888-4444",
            Estado = "Activo",
            CantidadPolizas = 2,
            UltimoContacto = DateTime.Now.AddDays(-3),
            TieneVencimientos = false
        }
    };

    private IEnumerable<ClienteInfo> GetFilteredClientes()
    {
        var filtered = clientes.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(c => 
                c.Nombres.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Apellidos.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Cedula.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        return selectedFilter switch
        {
            "activos" => filtered.Where(c => c.Estado == "Activo"),
            "inactivos" => filtered.Where(c => c.Estado == "Inactivo"),
            _ => filtered
        };
    }

    private int GetTotalClientes() => clientes.Count;
    private int GetClientesActivos() => clientes.Count(c => c.Estado == "Activo");
    private int GetClientesNuevos() => clientes.Count(c => c.UltimoContacto >= DateTime.Now.AddMonths(-1));

    private string GetClienteStatusClass(string estado)
    {
        return estado switch
        {
            "Activo" => "active",
            "Inactivo" => "inactive",
            _ => "unknown"
        };
    }

    private void VerDetalleCliente(int clienteId)
    {
        Nav.NavigateTo($"/operativo/cliente-detalle/{clienteId}");
    }

    private void EditarCliente(int clienteId)
    {
        Nav.NavigateTo($"/operativo/editar-cliente/{clienteId}");
    }

    private void LlamarCliente(string telefono)
    {
        // TODO: Implementar llamada
        Console.WriteLine($"Llamando a {telefono}");
    }

    private void AgregarCliente()
    {
        Nav.NavigateTo("/operativo/agregar-cliente");
    }

    private class ClienteInfo
    {
        public int Id { get; set; }
        public string Nombres { get; set; } = string.Empty;
        public string Apellidos { get; set; } = string.Empty;
        public string Cedula { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Telefono { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public int CantidadPolizas { get; set; }
        public DateTime UltimoContacto { get; set; }
        public bool TieneVencimientos { get; set; }
    }
}