@page "/operativo/siniestros"
@inject NavigationManager Nav

<div class="siniestros-container">
    <!-- Header de la página -->
    <div class="page-header">
        <button class="back-btn" @onclick="@(() => Nav.NavigateTo("/operativo/dashboard"))">
            <i class="bi bi-arrow-left"></i>
        </button>
        <h1 class="page-title">Gestión de Siniestros</h1>
        <button class="add-btn" @onclick="ReportarSiniestro">
            <i class="bi bi-plus-lg"></i>
        </button>
    </div>

    <!-- Estadísticas de siniestros -->
    <div class="stats-section">
        <div class="stat-card">
            <div class="stat-icon">
            <i class="bi bi-exclamation-triangle"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">@GetTotalSiniestros()</span>
                <span class="stat-label">Total Siniestros</span>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="bi bi-clock-history"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">@GetSiniestrosPendientes()</span>
                <span class="stat-label">Pendientes</span>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon">
                <i class="bi bi-currency-dollar"></i>
            </div>
            <div class="stat-content">
                <span class="stat-number">₡@GetMontoTotal().ToString("N0")</span>
                <span class="stat-label">Monto Total</span>
            </div>
        </div>
    </div>

    <!-- Filtros y búsqueda -->
    <div class="filters-section">
        <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" placeholder="Buscar siniestro o cliente..." @bind="searchTerm" @bind:event="oninput">
        </div>
        
        <div class="filter-buttons">
            <button class="filter-btn @(selectedFilter == "todos" ? "active" : "")" @onclick="@(() => selectedFilter = "todos")">
                Todos
            </button>
            <button class="filter-btn @(selectedFilter == "pendientes" ? "active" : "")" @onclick="@(() => selectedFilter = "pendientes")">
                Pendientes
            </button>
            <button class="filter-btn @(selectedFilter == "procesando" ? "active" : "")" @onclick="@(() => selectedFilter = "procesando")">
                Procesando
            </button>
            <button class="filter-btn @(selectedFilter == "cerrados" ? "active" : "")" @onclick="@(() => selectedFilter = "cerrados")">
                Cerrados
        </button>
        </div>
    </div>

    <!-- Lista de siniestros -->
    <div class="siniestros-list">
        @foreach (var siniestro in GetFilteredSiniestros())
        {
            <div class="siniestro-card @GetSiniestroStatusClass(siniestro.Estado)" @onclick="@(() => VerDetalleSiniestro(siniestro.Id))">
                <div class="siniestro-header">
                    <div class="siniestro-icon">
                        <i class="bi bi-exclamation-triangle"></i>
                    </div>
                    <div class="siniestro-info">
                        <h3 class="siniestro-numero">Siniestro #@siniestro.Numero</h3>
                        <p class="siniestro-cliente">Cliente: @siniestro.Cliente</p>
                        <p class="siniestro-poliza">Póliza: @siniestro.Poliza</p>
                    </div>
                    <div class="siniestro-status">
                        <span class="status-badge @GetSiniestroStatusClass(siniestro.Estado)">@siniestro.Estado</span>
                    </div>
                </div>

                <div class="siniestro-details">
                    <div class="detail-row">
                        <span class="detail-label">Fecha Reporte:</span>
                        <span class="detail-value">@siniestro.FechaReporte.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Tipo:</span>
                        <span class="detail-value">@siniestro.Tipo</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Monto Estimado:</span>
                        <span class="detail-value">₡@siniestro.MontoEstimado.ToString("N2")</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Prioridad:</span>
                        <span class="detail-value priority-@siniestro.Prioridad.ToLower()">@siniestro.Prioridad</span>
                    </div>
                </div>

                <div class="siniestro-description">
                    <p class="description-text">@siniestro.Descripcion</p>
</div>

                <div class="siniestro-actions">
                    <button class="action-btn primary" @onclick="@(() => VerDetalleSiniestro(siniestro.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-eye"></i>
                        Ver
                    </button>
                    <button class="action-btn secondary" @onclick="@(() => ActualizarSiniestro(siniestro.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-pencil"></i>
                        Actualizar
                    </button>
                    <button class="action-btn call" @onclick="@(() => ContactarCliente(siniestro.Cliente))" @onclick:stopPropagation="true">
                        <i class="bi bi-telephone"></i>
                        Contactar
                    </button>
                </div>

                @if (siniestro.Estado == "Pendiente" && GetDiasTranscurridos(siniestro.FechaReporte) >= 3)
                {
                    <div class="warning-banner">
                        <i class="bi bi-exclamation-triangle"></i>
                        <span>Sin procesar por @GetDiasTranscurridos(siniestro.FechaReporte) días</span>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Botón flotante para reportar siniestro -->
    <button class="fab-btn" @onclick="ReportarSiniestro">
        <i class="bi bi-plus-lg"></i>
    </button>

    <!-- Estado vacío -->
    @if (!GetFilteredSiniestros().Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-shield-check"></i>
            </div>
            <h3>No hay siniestros</h3>
            <p>No se encontraron siniestros con los filtros seleccionados</p>
            <button class="btn-primary" @onclick="@(() => selectedFilter = "todos")">
                Ver Todos
            </button>
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedFilter = "todos";

    private List<SiniestroInfo> siniestros = new()
    {
        new SiniestroInfo
        {
            Id = 1,
            Numero = "SIN-2024-001",
            Cliente = "María Elena Rodríguez",
            Poliza = "Vida Individual Premium",
            Estado = "Pendiente",
            FechaReporte = DateTime.Now.AddDays(-5),
            Tipo = "Accidente de Tránsito",
            MontoEstimado = 2500000,
            Prioridad = "Alta",
            Descripcion = "Accidente de tránsito en autopista, vehículo dañado y lesiones menores"
        },
        new SiniestroInfo
        {
            Id = 2,
            Numero = "SIN-2024-002",
            Cliente = "Carlos Alberto Méndez",
            Poliza = "Salud Familiar",
            Estado = "Procesando",
            FechaReporte = DateTime.Now.AddDays(-2),
            Tipo = "Emergencia Médica",
            MontoEstimado = 850000,
            Prioridad = "Media",
            Descripcion = "Hospitalización por apendicitis aguda, cirugía de emergencia"
        },
        new SiniestroInfo
        {
            Id = 3,
            Numero = "SIN-2024-003",
            Cliente = "Ana Lucía Vargas",
            Poliza = "Accidentes Personales",
            Estado = "Cerrado",
            FechaReporte = DateTime.Now.AddDays(-15),
            Tipo = "Accidente Laboral",
            MontoEstimado = 1500000,
            Prioridad = "Alta",
            Descripcion = "Caída en el lugar de trabajo, fractura de brazo"
        },
        new SiniestroInfo
        {
            Id = 4,
            Numero = "SIN-2024-004",
            Cliente = "Roberto Jiménez",
            Poliza = "Gastos Médicos",
            Estado = "Pendiente",
            FechaReporte = DateTime.Now.AddDays(-1),
            Tipo = "Consulta Médica",
            MontoEstimado = 45000,
            Prioridad = "Baja",
            Descripcion = "Consulta médica de rutina, exámenes de laboratorio"
        }
    };

    private IEnumerable<SiniestroInfo> GetFilteredSiniestros()
    {
        var filtered = siniestros.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(s => 
                s.Numero.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Cliente.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Poliza.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Tipo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        return selectedFilter switch
        {
            "pendientes" => filtered.Where(s => s.Estado == "Pendiente"),
            "procesando" => filtered.Where(s => s.Estado == "Procesando"),
            "cerrados" => filtered.Where(s => s.Estado == "Cerrado"),
            _ => filtered
        };
    }

    private int GetTotalSiniestros() => siniestros.Count;
    private int GetSiniestrosPendientes() => siniestros.Count(s => s.Estado == "Pendiente");
    private decimal GetMontoTotal() => siniestros.Sum(s => s.MontoEstimado);

    private string GetSiniestroStatusClass(string estado)
    {
        return estado switch
        {
            "Pendiente" => "pending",
            "Procesando" => "processing",
            "Cerrado" => "closed",
            _ => "unknown"
        };
    }

    private int GetDiasTranscurridos(DateTime fechaReporte)
    {
        return (DateTime.Now - fechaReporte).Days;
    }

    private void VerDetalleSiniestro(int siniestroId)
    {
        Nav.NavigateTo($"/operativo/siniestro-detalle/{siniestroId}");
    }

    private void ActualizarSiniestro(int siniestroId)
    {
        Nav.NavigateTo($"/operativo/actualizar-siniestro/{siniestroId}");
    }

    private void ContactarCliente(string cliente)
    {
        // TODO: Implementar contacto con cliente
        Console.WriteLine($"Contactando a {cliente}");
    }

    private void ReportarSiniestro()
    {
        Nav.NavigateTo("/operativo/reportar-siniestro");
    }

    private class SiniestroInfo
    {
        public int Id { get; set; }
        public string Numero { get; set; } = string.Empty;
        public string Cliente { get; set; } = string.Empty;
        public string Poliza { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public DateTime FechaReporte { get; set; }
        public string Tipo { get; set; } = string.Empty;
        public decimal MontoEstimado { get; set; }
        public string Prioridad { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
    }
}