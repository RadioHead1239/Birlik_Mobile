@page "/cliente/polizas"
@inject NavigationManager Nav

<div class="polizas-container">
    <!-- Header de la página -->
    <div class="page-header">
        <button class="back-btn" @onclick="@(() => Nav.NavigateTo("/cliente/dashboard"))">
            <i class="bi bi-arrow-left"></i>
        </button>
        <h1 class="page-title">Mis Pólizas</h1>
        <button class="refresh-btn" @onclick="RefrescarPolizas">
            <i class="bi bi-arrow-clockwise"></i>
        </button>
    </div>

    <!-- Filtros y búsqueda -->
    <div class="filters-section">
        <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" placeholder="Buscar póliza..." @bind="searchTerm" @bind:event="oninput">
        </div>
        
        <div class="filter-buttons">
            <button class="filter-btn @(selectedFilter == "todas" ? "active" : "")" @onclick="@(() => selectedFilter = "todas")">
                Todas
            </button>
            <button class="filter-btn @(selectedFilter == "activas" ? "active" : "")" @onclick="@(() => selectedFilter = "activas")">
                Activas
            </button>
            <button class="filter-btn @(selectedFilter == "vencidas" ? "active" : "")" @onclick="@(() => selectedFilter = "vencidas")">
                Vencidas
            </button>
        </div>
    </div>

    <!-- Lista de pólizas -->
    <div class="polizas-list">
        @foreach (var poliza in GetFilteredPolizas())
        {
            <div class="poliza-card @GetPolizaStatusClass(poliza.Estado)" @onclick="@(() => VerDetallePoliza(poliza.Id))">
                <div class="poliza-header">
                    <div class="poliza-icon">
                        <i class="bi bi-shield-check"></i>
                    </div>
                    <div class="poliza-info">
                        <h3 class="poliza-nombre">@poliza.Nombre</h3>
                        <p class="poliza-numero">Póliza #@poliza.Numero</p>
                    </div>
                    <div class="poliza-status">
                        <span class="status-badge @GetPolizaStatusClass(poliza.Estado)">@poliza.Estado</span>
                    </div>
                </div>

                <div class="poliza-details">
                    <div class="detail-row">
                        <span class="detail-label">Vigencia:</span>
                        <span class="detail-value">@poliza.FechaInicio.ToString("dd/MM/yyyy") - @poliza.FechaVencimiento.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Prima:</span>
                        <span class="detail-value">₡@poliza.Prima.ToString("N2")</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Suma Asegurada:</span>
                        <span class="detail-value">₡@poliza.SumaAsegurada.ToString("N0")</span>
                    </div>
                </div>

                <div class="poliza-actions">
                    <button class="action-btn primary" @onclick="@(() => VerDetallePoliza(poliza.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-eye"></i>
                        Ver Detalle
                    </button>
                    <button class="action-btn secondary" @onclick="@(() => DescargarPoliza(poliza.Id))" @onclick:stopPropagation="true">
                        <i class="bi bi-download"></i>
                        Descargar
                    </button>
                </div>

                @if (poliza.Estado == "Próxima a Vencer")
                {
                    <div class="warning-banner">
                        <i class="bi bi-exclamation-triangle"></i>
                        <span>Tu póliza vence en @GetDiasRestantes(poliza.FechaVencimiento) días</span>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Botón flotante para nueva póliza -->
    <button class="fab-btn" @onclick="SolicitarNuevaPoliza">
        <i class="bi bi-plus-lg"></i>
    </button>

    <!-- Estado vacío -->
    @if (!GetFilteredPolizas().Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="bi bi-shield-x"></i>
            </div>
            <h3>No hay pólizas</h3>
            <p>No se encontraron pólizas con los filtros seleccionados</p>
            <button class="btn-primary" @onclick="@(() => selectedFilter = "todas")">
                Ver Todas
            </button>
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private string selectedFilter = "todas";

    private List<PolizaInfo> polizas = new()
    {
        new PolizaInfo
        {
            Id = 1,
            Nombre = "Vida Individual Premium",
            Numero = "VLI-2024-001",
            Estado = "Activa",
            FechaInicio = DateTime.Now.AddMonths(-6),
            FechaVencimiento = DateTime.Now.AddMonths(6),
            Prima = 45000,
            SumaAsegurada = 5000000
        },
        new PolizaInfo
        {
            Id = 2,
            Nombre = "Salud Familiar",
            Numero = "SF-2024-002",
            Estado = "Próxima a Vencer",
            FechaInicio = DateTime.Now.AddMonths(-11),
            FechaVencimiento = DateTime.Now.AddDays(15),
            Prima = 85000,
            SumaAsegurada = 3000000
        },
        new PolizaInfo
        {
            Id = 3,
            Nombre = "Accidentes Personales",
            Numero = "AP-2024-003",
            Estado = "Activa",
            FechaInicio = DateTime.Now.AddMonths(-2),
            FechaVencimiento = DateTime.Now.AddMonths(10),
            Prima = 25000,
            SumaAsegurada = 2000000
        }
    };

    private IEnumerable<PolizaInfo> GetFilteredPolizas()
    {
        var filtered = polizas.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(p => p.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                         p.Numero.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        return selectedFilter switch
        {
            "activas" => filtered.Where(p => p.Estado == "Activa"),
            "vencidas" => filtered.Where(p => p.Estado == "Vencida"),
            _ => filtered
        };
    }

    private string GetPolizaStatusClass(string estado)
    {
        return estado switch
        {
            "Activa" => "active",
            "Próxima a Vencer" => "warning",
            "Vencida" => "expired",
            _ => "inactive"
        };
    }

    private int GetDiasRestantes(DateTime fechaVencimiento)
    {
        return (fechaVencimiento - DateTime.Now).Days;
    }

    private void VerDetallePoliza(int polizaId)
    {
        Nav.NavigateTo($"/cliente/poliza-detalle/{polizaId}");
    }

    private void DescargarPoliza(int polizaId)
    {
        // TODO: Implementar descarga de póliza
    }

    private void SolicitarNuevaPoliza()
    {
        Nav.NavigateTo("/cliente/solicitar-poliza");
    }

    private void RefrescarPolizas()
    {
        // TODO: Implementar refresh de datos
    }

    private class PolizaInfo
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Numero { get; set; } = string.Empty;
        public string Estado { get; set; } = string.Empty;
        public DateTime FechaInicio { get; set; }
        public DateTime FechaVencimiento { get; set; }
        public decimal Prima { get; set; }
        public decimal SumaAsegurada { get; set; }
    }
}